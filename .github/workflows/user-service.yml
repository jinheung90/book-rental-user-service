name: eureka
on:
  workflow_dispatch:
    inputs:
      tags:
        description:
        required: true
env:
  ECR_REPOSITORY: book-rental-app
  ECS_SERVICE: book-rental-service
  ECS_CLUSTER: book-rental-user-cluster
  SPRING_PROFILE: dev # 스프링 프로필
  MODULE_ROOT_PATH: ./jinheung_eureka # 해당 모듈의 루트
  MODULE_JAR: /main-api/build/libs/main-api.jar # 해당 모듈의 jar
  MODULE_DEPLOY_PATH: ./main-api/deploy # 해당 모듈의 deploy 디렉토리
  ECS_TASK_DEFINITION: task_definition.json
  CONTAINER_NAME: test-dev-container
  AWS_REGION: ap-northeast-2 # aws 리전
  ECR_IMAGE_TAG: ${{inputs.tags}}
#  ECR_ACCOUNT_ID:
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: step start
        run: "echo tags: $ECR_IMAGE_TAG"
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for root gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: create main boot jar
        run: ./gradlew bootJar -p $MODULE_ROOT_PATH

      - name: Copy Jar
        run: cp $MODULE_JAR deploy.jar

      - name: Copy agent json
        run: cp $MODULE_DEPLOY_PATH/cloud_watch_log_config.json agent_config.json

      - name: Copy docker file
        run: cp $MODULE_DEPLOY_PATH/Dockerfile_$SPRING_PROFILE Dockerfile

      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: $ECR_IMAGE_TAG
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG" >> $GITHUB_OUTPUT



